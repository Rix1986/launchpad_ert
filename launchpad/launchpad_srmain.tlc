%selectfile NULL_FILE

%function FcnSingleTaskingMain(mainFileName) void
  
  %if GenerateSampleERTMain
    %assign ::CompiledModel.GenerateSampleERTMain = TLC_FALSE
    %warning Overriding example (e)rt_main.c!
  %endif

  %assign cFile = LibCreateSourceFile("Source", "Custom", mainFileName)

  %openfile tmpBuf
  static boolean_T OverrunFlag = 0;\
  
  %<SLibDeclareFcnProtoCtlVariables()>\
  
  %<LibWriteModelData()>\
  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Definitions", tmpBuf)>
  
  %openfile tmpBuf
  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include <msp430.h>
  %if %<CompiledModel.FundamentalStepSize> < 0.000084 || %<CompiledModel.FundamentalStepSize> > 5.46125
    %warning Model step size must be between 0.000084 and 5.46125 seconds
    %warning Your step size is %<CompiledModel.FundamentalStepSize> seconds, defaulting to 1 second
    #define STEP_SIZE_VLO 12000
  %else
    %assign SAMPLE_TIME = CAST("Unsigned",%<CompiledModel.FundamentalStepSize>*12000)
    #define STEP_SIZE_VLO %<SAMPLE_TIME>
  %endif
  %closefile tmpBuf
 
  %<LibSetSourceFileSection(cFile, "Includes", tmpBuf)>
  
  %openfile tmpBuf
  %assign fcnReturns = "void"
  %assign fcnName = "rt_OneStep"
  %assign fcnParams = ""
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_srmain.tlc"; ...
    Type "Utility"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {
    /* Disable interrupts here */
    
    /* Check for overun */
    if (OverrunFlag++) {
      %<LibSetRTModelErrorStatus("\"Overrun\"")>;
      return;
    }
    
    /* Save FPU context here (if necessary) */
    /* Re-enable timer or interrupt here */
    %assign varsbuf = LibWriteModelInputs()
    %if varsbuf != ""
      /* Remove conditional, and set model inputs here */
      %<varsbuf>\
    %endif
    
    %<LibCallModelStep(0)>\
    
    %assign varsbuf = LibWriteModelOutputs()
    %if varsbuf != ""
      /* Remove conditional, and get model outputs here */
      %<varsbuf>\
    %endif
    
    OverrunFlag--;
    
    /* Disable interrupts here */
    /* Restore FPU context here (if necessary) */
    /* Enable interrupts here */
  }

  void FaultRoutine(void);
  void ConfigWDT(void);
  void ConfigClocks(void);
  //void ConfigLEDs(void);
  void ConfigTimerA2(void);

  %assign fcnReturns = "int_T"
  %assign fcnName = "main"
  %assign fcnParams = "int_T argc, const char_T *argv[]"
  %assign fcnCategory = "main"
  %createrecord fcnRec {Name fcnName; Returns fcnReturns; Params fcnParams; ...
    Abstract ""; Category fcnCategory; GeneratedBy "bareboard_srmain.tlc"; ...
    Type "Main"}
  %<SLibDumpFunctionBanner(fcnRec)>
  %undef fcnRec
  %<fcnReturns> %<fcnName>(%<fcnParams>)
  {  
    ConfigWDT();
    ConfigClocks();
    //ConfigLEDs();
    ConfigTimerA2();
    //_BIS_SR(GIE);
    //__bis_SR_register(LPM3_bits + GIE);          // LPM0 with interrupts enabled
    //__bic_SR_register_on_exit(LPM3_bits);
    //__bis_SR_register(CPUOFF + GIE);          // LPM0 with interrupts enabled
    //__bic_SR_register_on_exit(CPUOFF);        // Return to active mode
    //__enable_interrupt();                     // Enable interrupts.
    //__bis_SR_register(CPUOFF + GIE);        // LPM0 with interrupts enabled
    
    /* Initialize model */
    %<LibCallModelInitialize()>\

	while(1) {
        _BIS_SR(LPM3_bits + GIE); //Low Power Mode with interrupts
	} 

    %<LibCallModelTerminate()>\
    return 0;
  }

  void ConfigWDT(void)
  {
    WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
  }

  void ConfigClocks(void)
  {
    /* 
     * Basic Clock System Control 2
     * 
     * SELM_0 -- DCOCLK
     * DIVM_0 -- Divide by 1
     * ~SELS -- DCOCLK
     * DIVS_3 -- Divide by 8
     * ~DCOR -- DCO uses internal resistor
     * 
     * Note: ~<BIT> indicates that <BIT> has value zero
     */
    BCSCTL2 = SELM_0 | DIVM_0 | DIVS_3;

    if (CALBC1_1MHZ != 0xFF) {
        /* Follow recommended flow. First, clear all DCOx and MODx bits. Then
         * apply new RSELx values. Finally, apply new DCOx and MODx bit values.
         */
        DCOCTL = 0x00;
        BCSCTL1 = CALBC1_1MHZ;      /* Set DCO to 1MHz */
        DCOCTL = CALDCO_1MHZ;
    }

    /* 
     * Basic Clock System Control 1
     * 
     * XT2OFF -- Disable XT2CLK
     * ~XTS -- Low Frequency
     * DIVA_0 -- Divide by 1
     * 
     * Note: ~XTS indicates that XTS has value zero
     */
    BCSCTL1 |= XT2OFF | DIVA_0;

    /* 
     * Basic Clock System Control 3
     * 
     * XT2S_0 -- 0.4 - 1 MHz
     * LFXT1S_2 -- If XTS = 0, XT1 = VLOCLK ; If XTS = 1, XT1 = 3 - 16-MHz crystal or resonator
     * XCAP_1 -- ~6 pF
     */
    BCSCTL3 = XT2S_0 | LFXT1S_2 | XCAP_1;
  }

  void FaultRoutine(void)
  {
    P1OUT = BIT0; // P1.0 on (red LED)
    while(1); // TRAP
  }
  /*
  void ConfigLEDs(void)
  {
    P1DIR = BIT6 + BIT0; // P1.6 and P1.0 outputs
    P1OUT = 0; // LEDs off
  }
  */
  void ConfigTimerA2(void)
  {
    //TODO think about the best way to call the step function.
    //so far it is called from ISR driven by ACLK (12 kHz)
    //and ACLK seems to be not very precise. 
    CCTL0 = CCIE;
    CCR0 = 12000;
    TACTL = TASSEL_1 + MC_2; //TASSEL_2 for SMCLK
  }

  #ifdef SKIP_STATIC_CODE_METRICS
  #pragma vector=TIMER0_A0_VECTOR
  __interrupt void Timer_A (void)
  {
    CCR0 += STEP_SIZE_VLO; // add Step Time to the timer
    /* Associate rt_OneStep() with a timer that executes at the base rate of the model */
    //P1OUT |= BIT6; // P1.6 on (green LED)
    rt_OneStep();
    //P1OUT &= ~BIT6; // green LED off
    //P1OUT ^= BIT6; // toggle green LED
  }
  #endif

  %closefile tmpBuf
  
  %<LibSetSourceFileSection(cFile, "Functions", tmpBuf)>
  
%endfunction

%if !IsModelReferenceTarget()
%%Might call %matlab here to find the version and use ert_main/rt_main
%%accordingly.. From the other hand side, using the same name is even better
  %assign mdlName = LibGetModelName()
  %assign mainFileName = "main_%<mdlName>"
  %<FcnSingleTaskingMain(mainFileName)>
%endif
